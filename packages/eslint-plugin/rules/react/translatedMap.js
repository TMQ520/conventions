// 文件自动生成,请勿修改
module.exports = {
  "default-props-match-prop-types": "防止 void DOM 元素接收子元素",
  "destructuring-assignment": "每行一个 JSX 元素",
  "forbid-prop-types": "防止 React 组件定义中缺少 displayName",
  "function-component-definition": "必须使用箭头函数声明函数式组件",
  "jsx-boolean-value": "禁止 DOM 节点上的某些 props",
  "jsx-closing-bracket-location": "Why?",
  "jsx-closing-tag-location": "验证 jsx 中闭合括号的位置",
  "jsx-curly-brace-presence": "防止常见的大小写错误",
  "jsx-curly-newline": "强制执行 React 片段的简写或标准形式",
  "jsx-curly-spacing": "验证 jsx 中的结束标签位置",
  "jsx-equals-spacing": "当元素是多行时需要在 jsx 的第一个 prop 是在新的一行",
  "jsx-filename-extension": "防止使用不安全的 target='\\_blank'",
  "jsx-first-prop-new-line": "防止多行 JSX 周围缺少括号",
  "jsx-fragments": "防止使用 UNSAFE\\_方法",
  "jsx-indent-props": "在 jsx 中强制执行事件处理函数的命名规范",
  "jsx-indent": "在 jsx 中强制等号周围有空格",
  "jsx-max-props-per-line": "检测缺失 key 值",
  "jsx-no-bind": "在 jsx 中限制单行上的 prop 的数量",
  "jsx-no-comment-textnodes": "必须在.jsx/.tsx 文件中编写 jsx 语法",
  "jsx-no-constructed-context-values": "在 jsx 元素和表达式之后强制空行",
  "jsx-no-duplicate-props": "在 jsx 中禁止使用.bind()或箭头函数",
  "jsx-no-script-url": "强制 props 是只读的",
  "jsx-no-target-blank": "强制 jsx 缩进",
  "jsx-no-undef": "防止在 jsx 中使用字符串",
  "jsx-no-useless-fragment": "防止使用 javascript:URL",
  "jsx-one-expression-per-line":
    "在 JSX props 中/或子项中强制使用大括号或禁止使用不必要的大括号",
  "jsx-pascal-case": "禁止使用在 jsx 中未声明的变量",
  "jsx-props-no-multi-spaces": "验证 JSX 最大深度",
  "jsx-tag-spacing": "防止将子项作为 props 传递",
  "jsx-uses-react": "防止 jsx 中使用的变量被错误地标记为未使用",
  "jsx-uses-vars": "防止 React 被错误地标记为未使用",
  "jsx-wrap-multilines": "强制执行组件方法顺序",
  "no-access-state-in-setstate": "no-access-state-in-setstate",
  "no-array-index-key": "验证 JSX 开始括号和结束括号中的空格",
  "no-arrow-function-lifecycle": "偏好精确的 proptype 定义",
  "no-children-prop": "防止无效字符出现在标记中",
  "no-danger-with-children": "防止使用 findDOMNode",
  "no-danger": "防止 react 被错误地标记为未使用",
  "no-deprecated": "防止使用危险的 jsx 属性",
  "no-did-update-set-state": "防止在 componentDidMoun 中使用 setState",
  "no-find-dom-node": "禁止组件上的某些 props",
  "no-invalid-html-attribute": "生命周期方法应该是原型上的方法，而不是类字段",
  "no-is-mounted": "防止 this.state 的直接改变",
  "no-namespace": "防止在组件内部创建不稳定的组件",
  "no-redundant-should-component-update":
    "强制所有 defaultProps 有一个对应的非必需 PropType",
  "no-render-return-value": "防止注释作为文本节点插入",
  "no-string-refs": "防止使用 setState",
  "no-this-in-sfc": "防止使用 button 元素没有显式属性的元素 type",
  "no-typos": "强制布尔 props 命名一致",
  "no-unescaped-entities": "将样式 prop 值强制为对象或一个对象的变量",
  "no-unknown-property": "防止使用字符串引用",
  "no-unstable-nested-components": "防止 react contexts 采用不稳定的值",
  "no-unused-class-component-methods": "防止使用无效属性",
  "no-unused-prop-types":
    "防止子项和 props.dangerouslySetInnerHTML 之间出现问题",
  "no-unused-state":
    "扩展 React.PureComponent 时防止使用 shouldComponentUpdate",
  "no-will-update-set-state": "防止在 componentDidUpdate 中使用 setState",
  "prefer-es6-class": "why?",
  "prefer-exact-props": "强制在 React 元素中不使用命名空间",
  "prefer-stateless-function": "强制将无状态 React 组件编写为纯函数",
  "react-in-jsx-scope": "Why?",
  "require-render-return": "使用 jsx 时防止缺少 React",
  "self-closing-comp": "强制 ES5 或 ES6 类在渲染函数中返回值",
  "sort-comp": "防止没有子组件的额外结束标签",
  "state-in-constructor": "在 JSX 属性和表达式中的花括号中强制换行",
  "static-property-placement": "static-property-placement",
  "style-prop-object": "防止定义未使用的 propTypes",
  "void-dom-elements-no-children": "禁止使用未导出的 propTypes",
};
